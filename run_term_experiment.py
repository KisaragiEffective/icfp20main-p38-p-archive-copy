import matplotlib.pyplot as plt
import argparse
import subprocess
import timeit
import os
import collections
import sys
import math

experiments = [
    "tower",
    "twoTowers"
]

algorithms = [
    "evalNatNoCache",
    "evalNatCacheSlowEqSlowHash",
    "evalNatCacheSlowEqFastHash",
    "evalNatCacheFastEqSlowHash",
    "evalNatCacheFastEqFastHash",
    "evalNatCacheFastEqFastHashRobust",
    "evalNatPtrCache",
    "evalNatPtrCacheRobust"
]

def mk_lean_string(experiment, algorithm):
    return """-- Autogenerated from run_experiments.py
import PurePtr.Paper
def main : List String -> IO Unit
| [n] => do
  n ← pure (String.toNat n) | throw (IO.userError "invalid input");
  IO.println (Paper.EvalNats.%s (Paper.%s n))
| _ => throw (IO.userError "expected integer argument")
""" % (algorithm, experiment)

def run(experiment, algorithm, tower_heights, timeout, n_runs):
    results = []
    filename   = "RunTermExperiment.lean" # TODO: pass cmdline args
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(mk_lean_string(experiment, algorithm))
    subprocess.run(["make", "runTermExperiment"], check=True)

    executable = "./runTermExperiment"
    for tower_height in tower_heights:
        try:
            n_seconds = timeit.timeit(lambda: subprocess.run([executable, str(tower_height)], check=True, timeout=timeout * n_runs), number=n_runs) / n_runs
            results.append(n_seconds)
        except Exception as e:
            print(e)
            break
    return results

def plot_results(experiment, tower_heights, results, grid):
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.axis(auto=True)
    ax.set_title("Comparing implementations of evalNat on %s" % experiment)
    ax.set_xlabel("Height of tower")
    ax.set_ylabel("Number of seconds")
    for key in results:
        ax.plot(tower_heights[:len(results[key])], results[key], label=key)

    ax.set_xscale('log')
    ax.set_yscale('log')
    ax.legend()
    ax.grid(grid)
    fig.savefig("%s.png" % experiment)

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--timeout', action='store', dest='timeout', type=int, default=10)
    parser.add_argument('--n_runs', action='store', dest='n_runs', type=int, default=1)
    parser.add_argument('--n_low', action='store', dest='n_low', type=int, default=1)
    parser.add_argument('--n_inc', action='store', dest='n_inc', type=float, default=1.2)
    parser.add_argument('--n_high', action='store', dest='n_high', type=int, default=100)
    parser.add_argument('--grid', action='store', dest='grid', type=int, default=0)
    opts = parser.parse_args()

    for experiment in experiments:
        print("%s" % experiment)
        tower_heights = []
        n = opts.n_low
        while n <= opts.n_high:
            tower_heights.append(n)
            n = math.ceil(n * opts.n_inc)

        results = {}
        for algorithm in algorithms:
            print("  - %s" % algorithm)
            results[algorithm] = run(experiment, algorithm, tower_heights, opts.timeout, opts.n_runs)

        for key in results:
            print(key, ": ", list(zip(tower_heights, results[key])))

        plot_results(experiment, tower_heights, results, opts.grid)
